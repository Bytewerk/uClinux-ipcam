--- stunnel-5.23/src/env.c.orig	2015-09-25 13:27:13.491498234 +1000
+++ stunnel-5.23/src/env.c	2015-09-25 13:29:28.231495113 +1000
@@ -50,10 +50,32 @@
 #endif
 #undef getpeername
 
-int getpeername(int s, struct sockaddr_in *name, int *len) {
+int getpeername(int s, struct sockaddr *name, int *len) {
     char *value;
+    struct sockaddr_in *inp = (struct sockaddr_in *) name;
+    struct sockaddr_in6 *in6p = (struct sockaddr_in6 *) name;
 
     (void)s; /* squash the unused parameter warning */
+#if defined(__linux__)
+    if (inet_pton(AF_INET, getenv("REMOTE_HOST"), &inp->sin_addr)) {
+    	*len = sizeof(struct sockaddr_in);
+	inp->sin_family = AF_INET;
+    } else if (inet_pton(AF_INET6, getenv("REMOTE_HOST"), &in6p->sin6_addr)) {
+    	*len = sizeof(struct sockaddr_in6);
+	in6p->sin6_family = AF_INET6;
+	in6p->sin6_flowinfo = 0;
+	in6p->sin6_scope_id = 0;
+    } else {
+    	*len = sizeof(struct sockaddr_in);
+       inp->sin_addr.s_addr = htonl(INADDR_ANY);
+	inp->sin_family = AF_INET;
+    }
+    /* cheat and just use sockaddr_in ptr */
+    if((value=getenv("REMOTE_PORT")))
+        inp->sin_port=htons((uint16_t)atoi(value));
+    else
+        inp->sin_port=htons(0); /* dynamic port allocation */
+#else
     (void)len; /* squash the unused parameter warning */
     name->sin_family=AF_INET;
     if((value=getenv("REMOTE_HOST")))
@@ -64,6 +86,7 @@
         name->sin_port=htons((uint16_t)atoi(value));
     else
         name->sin_port=htons(0); /* dynamic port allocation */
+#endif
     return 0;
 }
 
